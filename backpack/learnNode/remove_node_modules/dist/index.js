"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const cwd = process.cwd();
const containModulePathList = [];
var isDirResponseType;
(function (isDirResponseType) {
    isDirResponseType[isDirResponseType["errorPath"] = 0] = "errorPath";
    isDirResponseType[isDirResponseType["isFile"] = 1] = "isFile";
    isDirResponseType[isDirResponseType["isDIr"] = 2] = "isDIr";
})(isDirResponseType || (isDirResponseType = {}));
/**
 *
 * @param p 文件路径
 * @returns 0 路径不存在 1 是文件 2 是目录
 */
function isDir(p) {
    const pStat = fs_1.default.lstatSync(p);
    if (!fs_1.default.existsSync(p)) {
        return isDirResponseType.errorPath;
    }
    else if (pStat.isFile()) {
        return isDirResponseType.isFile;
    }
    else if (pStat.isDirectory()) {
        return isDirResponseType.isDIr;
    }
    throw 'isDir内部错误';
}
const r = isDir(String.raw `E:\desktop\t2\triennium\learnNode\remove_node_modules\src\index.ts`);
console.log(r);
function main(cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isDir(cwd)) {
            const list = fs_1.default.opendirSync(cwd);
            console.log(list);
        }
    });
}
main(cwd);
